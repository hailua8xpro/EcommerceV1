@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }
}
@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <div class="container">
                <ul itemscope itemtype="http://schema.org/BreadcrumbList">
                    @{ int position = 1; }
                    @foreach (var cat in Model.CategoryBreadcrumb)
                    {
                        var isLastCategory = cat.Id == Model.Id;
                        <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                            @if (isLastCategory)
                            {
                                <strong class="current-item" itemprop="name">@cat.Name</strong>
                                <span itemprop="item" itemscope itemtype="http://schema.org/Thing">
                                </span>
                            }
                            else
                            {
                                <a itemscope href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item">
                                    <span itemprop="name">@cat.Name</span>
                                </a>
                                <span class="delimiter">@breadcrumbDelimiter</span>
                            }
                            <meta itemprop="position" content="@position" />
                        </li>
                        position++;
                    }
                </ul>
            </div>
        </div>
    }
}
@section filter{
    @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = Model.Id, currentProductId = 0 })
    @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
}
@section categorytitle{
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
}
@section left{
    <div class="block block-filter">
        <div class="block-title filter-title"><strong data-role="title">@T("ShopBy")</strong><span class="toggle-class"></span></div>
        <div class="block-content filter-content">
            <div class="filter-options">
                @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
                {
                    @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
                }
                @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
                {
                    @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
                }
            </div>

        </div>
        <div class="close-expand-mb"></div>
        <div class="close-expanded"></div>
    </div>
}
<div class="page category-page">

    <div class="page-body">
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }
        @if (Model.Products.Count > 0)
        {
            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                <div class="row my-4">
                    @foreach (var product in Model.Products)
                    {
                        if (Model.PagingFilteringContext.ViewMode != "list")
                        {
                            <div class="col-6 col-md-4">
                                @await Html.PartialAsync("_ProductBox", product)
                            </div>
                        }
                        else
                        {
                            <div class="col-12">
                                @await Html.PartialAsync("_ProductBoxListMode", product)
                            </div>
                        }

                    }
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
    </div>
</div>
<script asp-location="Footer">
    $(document).ready(function () {
        $('.available-items ul li a:not("selected")').click(function() {
            $(this).addClass('selected');
        })
    });
</script>
